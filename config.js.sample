// Common configuration between client and server (file location: web/config.js)
var PARAMS = new Array();

PARAMS['APP_AUTO_UPDATE'] = true;       //NEXTS RELEASES
PARAMS['APP_AUTO_START'] = true;        //NEXTS RELEASES

PARAMS['DATABASE_NAME'] = 'db1';  //change db name to reset data (by creating a new db)

PARAMS['SERVER_ADDRESS'] = '';
//'' AS DEFAULT (localhost, create database for each installed application)
//'https://main-server-domain.com' AS SHARED GUN.JS DATABASE

PARAMS['SERVER_PORT'] = 842;
PARAMS['SOCKET_PORT'] = 842;

PARAMS['PATH_HTTP_EVENTS'] = '/cmd';              //example: http://localhost:842/cmd/power-off
PARAMS['PATH_DATABASE'] = '/gun';                 //default: '/gun'   //20170901 gun.js does not allow custom path

PARAMS['NMAP_LOCATION'] = 'nmap';   //linux
//PARAMS['NMAP_LOCATION'] = 'C:/Program Files (x86)/Nmap/nmap.exe';       //windows

PARAMS['GUN_ADDITIONAL_PEERS'] = [];  //empty by default: no link between servers
//PARAMS['GUN_ADDITIONAL_PEERS'] = ['https://main-server-domain.com/gun']; 
//You can hosts and add one or some urls in this table, example:
//['https://main-server-domain.com/gun', 'http://2nd-without-reverse-proxy.fr:842/gun']


//======================================================================================================================
// Set default config :
if(PARAMS['SERVER_ADDRESS'] == ''){
    PARAMS['SERVER_ADDRESS'] = 'http://localhost';
}
PARAMS['LOCAL_DATABASE'] = (PARAMS['SERVER_ADDRESS'].indexOf("localhost") >- 1);


// Check if client or server side :
if((typeof module != 'undefined')&&(typeof module.exports != 'undefined'))
{
    //nodejs plugin system detected
    PARAMS['CLIENT_SIDE'] = false;

}
else
{
    PARAMS['CLIENT_SIDE'] = true;

    if(PARAMS['LOCAL_DATABASE']){
        //(gun.js web client have address the MAIN_SERVER_ADDRESS)

        //get server address from browser and update SERVER_ADDRESS :
        var hostname = window.location.hostname;
        if(hostname=='') host = 'localhost';
        var protocol = window.location.protocol;
        if(protocol=='') protocol = 'http:';
        PARAMS['SERVER_ADDRESS'] = protocol + '//'+ hostname;
    }

    var externalPort = window.location.port;
    //842 by default, 80 or 443 if behind a reverse proxy
    if(externalPort==80 || externalPort==443){
        externalPort = '';	//not need to specify port for default http/https
    }
    PARAMS['SERVER_PORT'] = externalPort;
    PARAMS['SOCKET_PORT'] = externalPort;
}


// Config.val() function available on client.js and server.js
var config_object = {
    val : function(varName){
        var error = '';
        var verbose = false;
        var result = '';
        if(PARAMS.hasOwnProperty(varName))
        {
           result = PARAMS[varName];
        }
        else
        {
            //calculated wich multiples config property
            switch(varName){
                case 'SERVER_URL':
                    result = this.val('SERVER_ADDRESS');
                    if(this.val('SERVER_PORT') != ''){
                        result += ':'+ this.val('SERVER_PORT'); 
                    }
                    break;
                case 'SOCKET_URL':
                    result = this.val('SERVER_ADDRESS');
                    if(this.val('SOCKET_PORT') != ''){
                        result += ':'+ this.val('SOCKET_PORT'); 
                    }
                    break;
                case 'SERVER_URL_EVENTS':
                    result = this.val('SERVER_URL') + this.val('PATH_HTTP_EVENTS');
                    break;
                case 'SOCKET_URL_DATABASE':
                    result = this.val('SOCKET_URL') + this.val('PATH_DATABASE');
                    break;
                case 'TABLE_COMPUTERS':
                    result = this.val('DATABASE_NAME') +'/computers';
                    break;
                case 'TABLE_MESSAGES':
                    result = this.val('DATABASE_NAME') +'/messages';
                    break;
                case 'FILE_SHARED_DB':
                    result = __dirname +'/../'+ this.val('DATABASE_NAME') +'-shared.json';
                    break;
                case 'FILE_LOCAL_DB':
                    result = __dirname +'/../'+ this.val('DATABASE_NAME') +'-local.json';
                    break;
				case 'GUN_PEERS':
					result = [this.val('SOCKET_URL_DATABASE')]; //array
					PARAMS['GUN_ADDITIONAL_PEERS'].forEach(function(url) {
						if(url !== result[0]){
							result.push(url);
						}
					});
					break;

                default:
                    error = '[ERROR] ';
                    result = false;
            }
        }
        if(error!='' || verbose) console.log(error+"Config.val("+varName+") : '"+ result +"'");

        return result;
    }
};


//function declaration :
if(config_object.val('CLIENT_SIDE'))
{
    //use as include in index.html / client.js
    Config = config_object;
}
else
{
    //use as module with require in nodejs server.js
    module.exports = config_object;
}

